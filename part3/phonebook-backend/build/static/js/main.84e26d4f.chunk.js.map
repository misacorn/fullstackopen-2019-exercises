{"version":3,"sources":["components/Notification.js","components/PersonForm.js","components/Persons.js","components/Filter.js","services/persons.js","App.js","serviceWorker.js","index.js"],"names":["NotificationWrapper","styled","div","_templateObject","props","hasError","Notification","_ref","message","react_default","a","createElement","className","PersonForm","addPerson","newName","newNumber","handleNameChange","handleNumberChange","onSubmit","value","onChange","type","Persons","rows","Filter","nameSearch","handleNameSearch","baseUrl","services_persons","axios","get","then","response","data","newObject","post","id","put","concat","delete","App","_useState","useState","_useState2","Object","slicedToArray","persons","setPersons","_useState3","_useState4","setNewName","_useState5","_useState6","setNewNumber","_useState7","_useState8","setSearchName","_useState9","_useState10","successMessage","setSuccessMessage","_useState11","_useState12","errorMessage","setErrorMessage","_useState13","_useState14","setHasError","useEffect","personService","initialPersons","filter","person","name","toLowerCase","includes","map","key","number","onClick","window","confirm","newPersons","p","deletePerson","Fragment","components_Notification","components_Filter","e","target","components_PersonForm","preventDefault","nameFilter","length","nameObj","newPerson","toConsumableArray","setTimeout","catch","error","console","log","personFound","find","changedPerson","objectSpread","components_Persons","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kcAGA,IAAMA,QAAsBC,EAAOC,IAAVC,IACd,SAAAC,GAAK,OAAKA,EAAMC,SAAW,MAAQ,UAiB/BC,EARM,SAAAC,GAA2B,IAAxBC,EAAwBD,EAAxBC,QAASH,EAAeE,EAAfF,SAC/B,OACEI,EAAAC,EAAAC,cAACX,EAAD,CAAqBK,SAAUA,GAC7BI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,KCMjBK,EApBI,SAAAN,GAAA,IACjBO,EADiBP,EACjBO,UACAC,EAFiBR,EAEjBQ,QACAC,EAHiBT,EAGjBS,UACAC,EAJiBV,EAIjBU,iBACAC,EALiBX,EAKjBW,mBALiB,OAOjBT,EAAAC,EAAAC,cAAA,QAAMQ,SAAUL,GACdL,EAAAC,EAAAC,cAAA,oBACQF,EAAAC,EAAAC,cAAA,SAAOS,MAAOL,EAASM,SAAUJ,KAEzCR,EAAAC,EAAAC,cAAA,sBACUF,EAAAC,EAAAC,cAAA,SAAOS,MAAOJ,EAAWK,SAAUH,KAE7CT,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQW,KAAK,UAAb,UCbSC,EAFC,SAAAhB,GAAA,IAAGiB,EAAHjB,EAAGiB,KAAH,OAAcf,EAAAC,EAAAC,cAAA,UAAKa,ICMpBC,EANA,SAAAlB,GAAA,IAAGmB,EAAHnB,EAAGmB,WAAYC,EAAfpB,EAAeoB,iBAAf,OACblB,EAAAC,EAAAC,cAAA,gCACoBF,EAAAC,EAAAC,cAAA,SAAOS,MAAOM,EAAYL,SAAUM,sBCHpDC,EAAU,eAsBDC,EApBA,WAEb,OADgBC,IAAMC,IAAIH,GACXI,KAAK,SAAAC,GAAQ,OAAIA,EAASC,QAkB5BL,EAfA,SAAAM,GAEb,OADgBL,IAAMM,KAAKR,EAASO,GACrBH,KAAK,SAAAC,GAAQ,OAAIA,EAASC,QAa5BL,EAVA,SAACQ,EAAIF,GAElB,OADgBL,IAAMQ,IAAN,GAAAC,OAAaX,EAAb,KAAAW,OAAwBF,GAAMF,GAC/BH,KAAK,SAAAC,GAAQ,OAAIA,EAASC,QAQ5BL,EALE,SAAAQ,GAEf,OADgBP,IAAMU,OAAN,GAAAD,OAAgBX,EAAhB,KAAAW,OAA2BF,IAC5BL,KAAK,SAAAC,GAAQ,OAAIA,EAASC,QCyG5BO,EArHH,WAAM,IAAAC,EACcC,mBAAS,IADvBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACTK,EADSH,EAAA,GACAI,EADAJ,EAAA,GAAAK,EAEcN,mBAAS,IAFvBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAETlC,EAFSmC,EAAA,GAEAC,EAFAD,EAAA,GAAAE,EAGkBT,mBAAS,IAH3BU,EAAAR,OAAAC,EAAA,EAAAD,CAAAO,EAAA,GAGTpC,EAHSqC,EAAA,GAGEC,EAHFD,EAAA,GAAAE,EAIoBZ,mBAAS,IAJ7Ba,EAAAX,OAAAC,EAAA,EAAAD,CAAAU,EAAA,GAIT7B,EAJS8B,EAAA,GAIGC,EAJHD,EAAA,GAAAE,EAK4Bf,mBAAS,IALrCgB,EAAAd,OAAAC,EAAA,EAAAD,CAAAa,EAAA,GAKTE,EALSD,EAAA,GAKOE,EALPF,EAAA,GAAAG,EAMwBnB,mBAAS,IANjCoB,EAAAlB,OAAAC,EAAA,EAAAD,CAAAiB,EAAA,GAMTE,EANSD,EAAA,GAMKE,EANLF,EAAA,GAAAG,EAOgBvB,mBAAS,IAPzBwB,EAAAtB,OAAAC,EAAA,EAAAD,CAAAqB,EAAA,GAOT7D,EAPS8D,EAAA,GAOCC,EAPDD,EAAA,GAShBE,oBAAU,WACRC,IAAuBtC,KAAK,SAAAuC,GAC1BvB,EAAWuB,MAEZ,IAEH,IAqEM/C,EAAOuB,EACVyB,OAAO,SAAAC,GAAM,OACZA,EAAOC,KAAKC,cAAcC,SAASlD,EAAWiD,iBAE/CE,IAAI,SAAAJ,GAAM,OACThE,EAAAC,EAAAC,cAAA,MAAImE,IAAKL,EAAOpC,IACboC,EAAOC,KADV,MACmBD,EAAOM,OACxBtE,EAAAC,EAAAC,cAAA,UAAQqE,QAAS,kBAhBF,SAAAP,GACnB,GAAIQ,OAAOC,QAAP,UAAA3C,OAAyBkC,EAAOC,KAAhC,MAA0C,CAC5C,IAAMS,EAAapC,EAAQyB,OAAO,SAAAY,GAAC,OAAIA,EAAE/C,KAAOoC,EAAOpC,KACvDiC,EAAuBG,EAAOpC,IAAIL,KAAK,WACrCgB,EAAWmC,MAYYE,CAAaZ,KAApC,aAIN,OACEhE,EAAAC,EAAAC,cAAAF,EAAAC,EAAA4E,SAAA,KACE7E,EAAAC,EAAAC,cAAA,uBACCiD,EACCnD,EAAAC,EAAAC,cAAC4E,EAAD,CAAc/E,QAASoD,EAAgBvD,SAAUA,IAC/C2D,EACFvD,EAAAC,EAAAC,cAAC4E,EAAD,CAAc/E,QAASwD,EAAc3D,SAAUA,IAC7C,KACJI,EAAAC,EAAAC,cAAC6E,EAAD,CAAQ9D,WAAYA,EAAYC,iBApFX,SAAA8D,GAAC,OAAIhC,EAAcgC,EAAEC,OAAOtE,UAqFjDX,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAACgF,EAAD,CACE7E,UArFY,SAAA2E,GAChBA,EAAEG,iBACF,IAAMC,EAAa9C,EAAQyB,OAAO,SAAAC,GAAM,OAAIA,EAAOC,OAAS3D,IAC5D,GAA0B,IAAtB8E,EAAWC,OAAc,CAC3B,IAAMC,EAAU,CACdrB,KAAM3D,EACNgE,OAAQ/D,EACRqB,GAAIU,EAAQ+C,OAAS,GAEvBxB,EACUyB,GACP/D,KAAK,SAAAgE,GACJhD,EAAU,GAAAT,OAAAM,OAAAoD,EAAA,EAAApD,CAAKE,GAAL,CAAciD,KACxB7C,EAAW,IACXG,EAAa,IACbO,EAAiB,SAAAtB,OAAUxB,EAAV,MACjBqD,GAAY,GACZ8B,WAAW,WACTrC,EAAkB,OACjB,OAEJsC,MAAM,SAAAC,GACLC,QAAQC,IAAIF,EAAMnE,SAASC,MAC3B+B,EAAgBmC,EAAMnE,SAASC,KAAKkE,OACpChC,GAAY,GACZ8B,WAAW,WACTjC,EAAgB,OACf,YAGP,GAAIgB,OAAOC,QAAP,UAAA3C,OAAyBsD,EAAW,GAAGnB,KAAvC,MAAiD,CACnD,IAAM6B,EAAcxD,EAAQyD,KAAK,SAAApB,GAAC,OAAIA,EAAE/C,KAAOwD,EAAW,GAAGxD,KACvDoE,EAAa5D,OAAA6D,EAAA,EAAA7D,CAAA,GAAQ0D,EAAR,CAAqBxB,OAAQ/D,IAChDsD,EACUmC,EAAcpE,GAAIoE,GACzBzE,KACCgB,EACED,EAAQ8B,IAAI,SAAAO,GAAC,OAAKA,EAAE/C,KAAOoE,EAAcpE,GAAK+C,EAAIqB,MAGrDN,MAAM,SAAAC,GACLnC,EAAe,aAAA1B,OACAgE,EAAY7B,KADZ,uCAGfN,GAAY,GACZ8B,WAAW,WACTjC,EAAgB,OACf,KACHjB,EAAWD,EAAQyB,OAAO,SAAAY,GAAC,OAAIA,EAAE/C,KAAOkE,EAAYlE,UAsCxDtB,QAASA,EACTC,UAAWA,EACXC,iBA9FmB,SAAAwE,GAAC,OAAItC,EAAWsC,EAAEC,OAAOtE,QA+F5CF,mBA7FqB,SAAAuE,GAAC,OAAInC,EAAamC,EAAEC,OAAOtE,UA+FlDX,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAACgG,EAAD,CAASnF,KAAMA,MC7GDoF,QACW,cAA7B3B,OAAO4B,SAASC,UAEe,UAA7B7B,OAAO4B,SAASC,UAEhB7B,OAAO4B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxG,EAAAC,EAAAC,cAACuG,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvF,KAAK,SAAAwF,GACjCA,EAAaC","file":"static/js/main.84e26d4f.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nconst NotificationWrapper = styled.div`\n  color: ${props => (props.hasError ? \"red\" : \"green\")};\n  background: lightgrey;\n  font-size: 20px;\n  border-style: solid;\n  border-radius: 5px;\n  padding: 10px;\n  margin-bottom: 10px;\n`;\n\nconst Notification = ({ message, hasError }) => {\n  return (\n    <NotificationWrapper hasError={hasError}>\n      <div className=\"message\">{message}</div>\n    </NotificationWrapper>\n  );\n};\n\nexport default Notification;\n","import React from \"react\";\n\nconst PersonForm = ({\n  addPerson,\n  newName,\n  newNumber,\n  handleNameChange,\n  handleNumberChange\n}) => (\n  <form onSubmit={addPerson}>\n    <div>\n      Name: <input value={newName} onChange={handleNameChange} />\n    </div>\n    <div>\n      Number: <input value={newNumber} onChange={handleNumberChange} />\n    </div>\n    <div>\n      <button type=\"submit\">Add</button>\n    </div>\n  </form>\n);\n\nexport default PersonForm;\n","import React from \"react\";\n\nconst Persons = ({ rows }) => <ul>{rows}</ul>;\n\nexport default Persons;\n","import React from \"react\";\n\nconst Filter = ({ nameSearch, handleNameSearch }) => (\n  <div>\n    Filter shown with <input value={nameSearch} onChange={handleNameSearch} />\n  </div>\n);\n\nexport default Filter;\n","import axios from \"axios\";\nconst baseUrl = \"/api/persons\";\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  return request.then(response => response.data);\n};\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject);\n  return request.then(response => response.data);\n};\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\n  return request.then(response => response.data);\n};\n\nconst deletion = id => {\n  const request = axios.delete(`${baseUrl}/${id}`);\n  return request.then(response => response.data);\n};\n\nexport default {\n  getAll,\n  create,\n  update,\n  deletion\n};\n","import React, { useState, useEffect } from \"react\";\n\nimport Notification from \"./components/Notification\";\nimport PersonForm from \"./components/PersonForm\";\nimport Persons from \"./components/Persons\";\nimport Filter from \"./components/Filter\";\nimport personService from \"./services/persons\";\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [newNumber, setNewNumber] = useState(\"\");\n  const [nameSearch, setSearchName] = useState(\"\");\n  const [successMessage, setSuccessMessage] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [hasError, setHasError] = useState(\"\");\n\n  useEffect(() => {\n    personService.getAll().then(initialPersons => {\n      setPersons(initialPersons);\n    });\n  }, []);\n\n  const handleNameChange = e => setNewName(e.target.value);\n\n  const handleNumberChange = e => setNewNumber(e.target.value);\n\n  const handleNameSearch = e => setSearchName(e.target.value);\n\n  const addPerson = e => {\n    e.preventDefault();\n    const nameFilter = persons.filter(person => person.name === newName);\n    if (nameFilter.length === 0) {\n      const nameObj = {\n        name: newName,\n        number: newNumber,\n        id: persons.length + 1\n      };\n      personService\n        .create(nameObj)\n        .then(newPerson => {\n          setPersons([...persons, newPerson]);\n          setNewName(\"\");\n          setNewNumber(\"\");\n          setSuccessMessage(`Added ${newName}!`);\n          setHasError(false);\n          setTimeout(() => {\n            setSuccessMessage(null);\n          }, 5000);\n        })\n        .catch(error => {\n          console.log(error.response.data);\n          setErrorMessage(error.response.data.error);\n          setHasError(true);\n          setTimeout(() => {\n            setErrorMessage(null);\n          }, 5000);\n        });\n    } else {\n      if (window.confirm(`Update ${nameFilter[0].name}?`)) {\n        const personFound = persons.find(p => p.id === nameFilter[0].id);\n        const changedPerson = { ...personFound, number: newNumber };\n        personService\n          .update(changedPerson.id, changedPerson)\n          .then(\n            setPersons(\n              persons.map(p => (p.id !== changedPerson.id ? p : changedPerson))\n            )\n          )\n          .catch(error => {\n            setErrorMessage(\n              `The note '${personFound.name}' was already deleted from server.`\n            );\n            setHasError(true);\n            setTimeout(() => {\n              setErrorMessage(null);\n            }, 5000);\n            setPersons(persons.filter(p => p.id !== personFound.id));\n          });\n      }\n    }\n  };\n\n  const deletePerson = person => {\n    if (window.confirm(`Delete ${person.name}?`)) {\n      const newPersons = persons.filter(p => p.id !== person.id);\n      personService.deletion(person.id).then(() => {\n        setPersons(newPersons);\n      });\n    }\n  };\n\n  const rows = persons\n    .filter(person =>\n      person.name.toLowerCase().includes(nameSearch.toLowerCase())\n    )\n    .map(person => (\n      <li key={person.id}>\n        {person.name} - {person.number}\n        <button onClick={() => deletePerson(person)}>Delete</button>\n      </li>\n    ));\n\n  return (\n    <>\n      <h2>Phonebook</h2>\n      {successMessage ? (\n        <Notification message={successMessage} hasError={hasError} />\n      ) : errorMessage ? (\n        <Notification message={errorMessage} hasError={hasError} />\n      ) : null}\n      <Filter nameSearch={nameSearch} handleNameSearch={handleNameSearch} />\n      <h3>Add a new person</h3>\n      <PersonForm\n        addPerson={addPerson}\n        newName={newName}\n        newNumber={newNumber}\n        handleNameChange={handleNameChange}\n        handleNumberChange={handleNumberChange}\n      />\n      <h3>Numbers</h3>\n      <Persons rows={rows} />\n    </>\n  );\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}